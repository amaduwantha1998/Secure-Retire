import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface FinancialProfile {
  netWorth: number;
  monthlyIncome: number;
  monthlySavings: number;
  totalDebts: number;
  debtToIncomeRatio: number;
  retirementReadinessScore: number;
  age: number;
  currency: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { financialProfile }: { financialProfile: FinancialProfile } = await req.json();

    if (!geminiApiKey) {
      return new Response(JSON.stringify({ error: 'Gemini API key not configured' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const prompt = `As a certified financial advisor, analyze this client's financial profile and provide 3-4 personalized, actionable insights:

Financial Profile:
- Net Worth: ${financialProfile.currency} ${financialProfile.netWorth.toLocaleString()}
- Monthly Income: ${financialProfile.currency} ${financialProfile.monthlyIncome.toLocaleString()}
- Monthly Savings: ${financialProfile.currency} ${financialProfile.monthlySavings.toLocaleString()}
- Total Debts: ${financialProfile.currency} ${financialProfile.totalDebts.toLocaleString()}
- Debt-to-Income Ratio: ${financialProfile.debtToIncomeRatio.toFixed(1)}%
- Retirement Readiness Score: ${financialProfile.retirementReadinessScore}/100
- Age: ${financialProfile.age}

Provide specific, actionable recommendations that are:
1. Personalized to their situation
2. Include specific dollar amounts when relevant
3. Prioritized by impact
4. Achievable and realistic

Format your response as a JSON array of insight objects with "title", "description", "priority" (high/medium/low), and "actionAmount" (if applicable) fields. Return only the JSON array, no additional text.`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1000,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    const data = await response.json();
    
    if (!response.ok) {
      console.error('Gemini API error:', data);
      throw new Error(`Gemini API error: ${data.error?.message || 'Unknown error'}`);
    }

    let insights;
    try {
      const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
      if (!generatedText) {
        throw new Error('No content generated by Gemini');
      }
      
      // Extract JSON from the response (remove any markdown formatting)
      const jsonMatch = generatedText.match(/\[[\s\S]*\]/);
      const jsonString = jsonMatch ? jsonMatch[0] : generatedText;
      insights = JSON.parse(jsonString);
    } catch (parseError) {
      console.error('Error parsing Gemini response:', parseError);
      // Fallback if AI doesn't return valid JSON
      insights = [
        {
          title: "Emergency Fund Priority",
          description: "Build an emergency fund covering 3-6 months of expenses before increasing investments.",
          priority: "high",
          actionAmount: Math.round(financialProfile.monthlyIncome * 3)
        },
        {
          title: "Increase Retirement Savings",
          description: `Consider increasing your monthly retirement contribution by $${Math.round(financialProfile.monthlyIncome * 0.02)} to improve your retirement readiness.`,
          priority: "medium",
          actionAmount: Math.round(financialProfile.monthlyIncome * 0.02)
        },
        {
          title: "Debt Optimization",
          description: "Focus on paying off high-interest debt first to reduce your debt-to-income ratio.",
          priority: financialProfile.debtToIncomeRatio > 30 ? "high" : "medium"
        }
      ];
    }

    return new Response(JSON.stringify({ insights }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-financial-insights function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});